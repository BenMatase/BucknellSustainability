
Steps (so far):

1) git clone https://www.github.com/sudar/Arduino-Makefile
2) move arduino code into folder next to this one
3) create a make file that reads:
```
BOARD_TAG=<boardTag>
MONITOR_PORT=<port>

include ../Arduino-Makefile/Arduino.mk
```
Sub in the appropriate board tag and port name. For the arduno nano:
```
BOARD_TAG=nano
MONITOR_PORT=/dev/ttyUSB0
```

Note: the MONITOR_BAUDRATE also needs a value; however, it should be auto-detected.
If it is autodetected, the makefile will spit out the line:
`[DETECTED]			MONITOR_BAUDRATE = <rate> (in sketch)`
If it's not detected, it'll spit out:
`[ASSUMED]			MONITOR_BAUDRATE = 9600`

Ensure that the rate is always set correctly; whatever system we have to upload files
needs to be able to check the makefile's output for successful baudrate detection.

4) Run `make`. This compiles and links the project. There are two main limitations:

Only one .ino or .pde file is supported. (sudar/Arduino-Makefile#49) A possible workaround
is to use michaelbaisch/uDinoPreprocessor to combine files together.

Methods must be declared before use, unlike in the normal Arduino IDE. (sudar/Arduino-Makefile#59) The same workaround
(michaelbaisch/uDinoPreporcessor) would fix this.

5) Run `make upload`. This resets the board, and uploads the new program, then starts running it.

6) Run `make monitor`. This opens the Serial I/O in the terminal using the `screen` utility. This is
how we will be reading experiment data. We should also have a way to display the raw output to the
researchers, sortof like a TravisCI build.

Because the communication is just text, in theory, there's no need to make a library to format data.
However, it would probably be the best user experience.

Note that there are some complications with using libraries with Arduino-Makefile; it's not trivial to
ensure that the makefile knows the location of the library. And the library can't just be an extra .ino/.pde
file to add to the project, because Arduino-Makefile doesn't support multiple .ino/.pde files (without a
workaround).
